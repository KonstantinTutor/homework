from random import randint

# 3.
# Вам дана матричная сетка размера m x n,
# состоящая из положительных целых чисел.
#
# Выполняйте следующую операцию, пока сетка не станет пустой:
# Удалите элемент с наибольшим значением из каждой строки.
# Если существует несколько таких элементов, удалите любой из них.
# Добавьте к ответу максимальный из удаленных элементов.
# Обратите внимание, что количество столбцов уменьшается на
# один после каждой операции.
# Верните ответ после выполнения операций, описанных выше.
#
# Пример: [[1, 2, !4!], => [[1, !2!], => [[!1!], => [[],
#          [!3!, 3, 1]] =>  [!3!, 1]] =>  [!1!]] =>  []]
#             0 + 4   ||   4 + 3  ||  7 + 1 => Ответ: 8


def foo(matrix):
    count = 0
    for i in range(len(matrix[0])):
        res = [j.pop(j.index(max(j))) for j in matrix]
        count += max(res)
    return count


test_1 = [[1, 2, 4],
          [3, 3, 1]]
test_2 = [[randint(1, 20) for i in range(5)] for j in range(7)]

print(foo(test_1))
print(foo(test_2))


# 8.
# Вам дана целочисленная матричная сетка размера n x n.
# Создайте целочисленную матрицу max_local размера
# (n - 2) x (n - 2), такую, что:
# max_local[i][j] равно наибольшему значению матрицы
# 3 x 3 в сетке с центром вокруг строки i + 1 и столбца j + 1.
# Другими словами, мы хотим найти наибольшее значение
# в каждой непрерывной матрице 3 x 3 в сетке.
#
# Верните сгенерированную матрицу.

variant_x = (-1, -1, -1, 0, 0, 0, 1, 1, 1)
variant_y = (-1, 0, 1, -1, 0, 1, -1, 0, 1)


def foo1(matrix):
    max_local = []
    for i in range(1, len(matrix) - 1):
        temp = []
        for j in range(1, len(matrix[0]) - 1):
            # Проходим по матрице размером на 1 меньше с каждой стороны, создаем список
            # three_by_three со значениями матрицы 3 на 3, максимальное добавляем
            # в список temp.
            three_by_three = [matrix[i + x][j + y] for x, y in zip(variant_x, variant_y)]
            temp.append(max(three_by_three))
        max_local.append(temp)
    return max_local


grid = [[9, 7, 5, 1],
        [4, 2, 0, 3],
        [0, 5, 0, 6],
        [2, 6, 4, 1]]

for k in foo1(grid):
    print(k)

test_3 = [[randint(1,100) for i in range(5)] for j in range(7)]
for k in test_3:
    print(k)
print()
for k in foo1(test_3):
    print(k)
    
# Оставляю какой-то комментарий
